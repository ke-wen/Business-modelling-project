import datetime

# Class representing an individual item in the shop
class Item:
    _id_counter = 1  # Static variable for unique ID assignment

    def __init__(self, name, item_type, price, expiration_date):
        self.id = Item._id_counter  # Assign a unique ID to each item
        Item._id_counter += 1       # Increment ID counter for the next item
        self.name = name            # Name of the item
        self.item_type = item_type  # Type of the item (luxury, essential, gift)
        self.price = price          # Price of the item
        self.expiration_date = expiration_date  # Expiration date of the item

    def __str__(self):
        # String representation of the item details
        return (f"ID: {self.id}, Name: {self.name}, Type: {self.item_type}, "
                f"Price: ${self.price}, Expiration Date: {self.expiration_date}")

# Class for managing stock control in the shop
class StockControl:
    def __init__(self):
        self.items = []                 # List to store all items
        self.item_counts = {'luxury': 0, 'essential': 0, 'gift': 0}  # Dictionary to keep count of each item type

    def add_item(self, name, item_type, price, expiration_date):
        # Add a new item to the stock
        new_item = Item(name, item_type, price, expiration_date)
        self.items.append(new_item)
        self.item_counts[item_type] += 1  # Increment the count for the item type

    def view_items(self):
        # Display all items in stock and the count of each type
        self.remove_expired_items()  # Automatically remove expired items before viewing
        print(f"\nStocks of each type of good: {self.item_counts}")  # Print the counts of each item type
        for item in self.items:
            print(item)

    def delete_item(self, item_id):
        # Remove an item from the stock using its ID
        item_to_delete = next((item for item in self.items if item.id == item_id), None)
        if item_to_delete:
            self.items.remove(item_to_delete)
            self.item_counts[item_to_delete.item_type] -= 1  # Decrement the count for the item type

    def remove_expired_items(self):
        # Remove items that have passed their expiration date
        today = datetime.date.today()
        for item in list(self.items):  # Iterate over a copy of the list
            if item.expiration_date <= today:
                self.items.remove(item)
                self.item_counts[item.item_type] -= 1  # Decrement the count for the item type
